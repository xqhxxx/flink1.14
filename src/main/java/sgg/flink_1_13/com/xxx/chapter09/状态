9 状态

数据是‘单个事件处理’  ---类似于map操作

有状态的计算则是：
    结合之前的数据--
    基于多个事件输出结果：

有一个任务维护，计算输出结果的所数有据，叫做这个任务的状态


9.1
接收数据  获取状态 更新状态 发送数据
算子
富函数都可以获取上下文：无状态算子也可以自定义富函数方法使用
---》所有的都可以

状态管理 f有一套完整的机制：包括状态访问 持久化 故障恢复 扩展
    ---调用相应API使用状态，或对应用的容错机制配置


2 按键分区状态（keyed state） 最为常见
    以key为作用范围进行隔离
    必须基于keyedStream
    基于状态描述器创建

        ValueState      周期性计算pv 定时打印总的累加值
        ListState       2join 全外连接
        MapState        模拟滚动窗口    --可以.remove、其他不可以
        ReducingState
        AggregatingState   聚合平均统计

    2.4 状态生存时间 TTL time to live

3 算子状态（operator state)  没有key，只有一个
    多用于source sink等与外部连接的算子上   例：kafka的精准一次

    ListState      缓存sink数据
    UnionListState
    BroadcastState    动态配置（规则）
4 广播状态

exactly-once
    端到端（end-to-end）状态一致性
    ⚫ 内部保证 —— 依赖 checkpoint
    ⚫ source 端 —— 需要外部源可重设数据的读取位置
    ⚫ sink 端 —— 需要保证从故障恢复时，数据不会重复写入外部系统
        ⚫ 幂等写入
        ⚫ 事务写入 :预写日志（WAL）和两阶段提交2PC）

5 持久化
    检查点 checkpoint
        核心作用是确保状态正确
    在一个逻辑时间点(对应检查点屏障在输入流中的位置)为计算状态拍了快照
    将输入流倒回到上一个检查点屏障的位置，同时恢复 map 算子的状态值
    使 Flink 可以保证 exactly-once，并且不需要牺牲性能

    状态后端---管理状态
        哈希表状态后端（默认）---放内存里
        内嵌RocksDb状态后端---放硬盘  异步快照

        可在yaml更改默认配置 代码配置